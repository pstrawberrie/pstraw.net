---
const currentUrl = Astro.url.pathname;
const {
  currentPage,
  lastPage,
  total,
  prevUrl,
  nextUrl,
  label = "items",
} = Astro.props;

const baseUrl = !prevUrl
  ? currentUrl
  : currentUrl.split("/").slice(0, -1).join("/");
---

<div class="pagination">
  {
    (prevUrl !== undefined || nextUrl !== undefined) && (
      <nav aria-label="Pagination Navigation">
        <div class="pagination-prev">
          {currentUrl === baseUrl && <i class="name">&laquo; First</i>}
          {currentUrl !== baseUrl && (
            <a class="name" href={baseUrl}>
              &laquo; First
            </a>
          )}
          {!prevUrl && <i class="name">&lsaquo; Prev</i>}
          {prevUrl && (
            <a class="name" href={prevUrl}>
              &lsaquo; Prev
            </a>
          )}
        </div>
        <div class="pagination-info">
          Page <strong>{currentPage}</strong> of <strong>{lastPage}</strong>
        </div>
        <div class="pagination-next">
          {nextUrl && <a href={nextUrl}>Next &rsaquo;</a>}
          {!nextUrl && <i class="name">Next &rsaquo;</i>}
          {!nextUrl && <i class="name">Last &raquo;</i>}
          {nextUrl && (
            <a class="name" href={`${baseUrl}/${lastPage}`}>
              Last &raquo;
            </a>
          )}
        </div>
      </nav>
    )
  }
</div>

<style lang="scss">
  @use "@css/util";
  .pagination {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 3rem 0;
    font-family: var(--font-family-mono);
  }

  nav {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    line-height: 1;
    font-size: 1rem;
    gap: 0.5rem;

    @include util.mq(sm) {
      flex-direction: row;
      flex-wrap: wrap;
    }
  }

  .pagination-prev,
  .pagination-next {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
  }

  a,
  i {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    background: var(--c-card-background);
    height: 2.5rem;
    padding: 0 0.75rem;
    border-radius: 0.5rem;
    border: 1px solid var(--c-card-border);
    color: var(--c-text-secondary);
    font-size: 0.875rem;
    transition: 0.3s ease;
  }

  a::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.08);
    opacity: 0;
    transition: 0.3s ease;
  }

  a:hover {
    transform: translateY(-1px);
    &::after {
      opacity: 1;
    }
  }

  .name {
    font-size: 0.8rem;
  }

  i {
    opacity: 0.4;
    cursor: default;
  }

  .pagination-info {
    padding: 0.5rem;
    color: var(--c-text-muted);
    font-size: 0.875rem;

    strong:first-child {
      color: var(--c-tertiary);
    }

    @include util.mq(sm) {
      padding: 0 0.5rem;
    }
  }
</style>
