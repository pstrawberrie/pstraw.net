---
const { links, color = "tertiary", currentPage = null } = Astro.props;

const currentPath = Astro.url.pathname;
const isActive = (path) => {
  const current = currentPath.split("/").splice(1);
  const link = path.split("/").splice(1);

  // @TODO: theres definitely a better way to do this - this is very hard to read >.<
  if (path === currentPath) return true; // standard links
  if (
    currentPage &&
    current[current.length - 1] === `${currentPage}` &&
    link[link.length - 1] === current[current.length - 2]
  )
    return true; // single-level paginated links
  if (
    (currentPage &&
      link[link.length - 1] === "tags" &&
      current[current.length - 2] === "tags") ||
    (link[link.length - 1] === "tags" &&
      current[current.length - 3] === "tags" &&
      current[current.length - 1] === `${currentPage}`)
  )
    return true; // notes tags paginated links
  if (
    (currentPage &&
      link[link.length - 1] === "authors" &&
      current[current.length - 2] === "authors") ||
    (link[link.length - 1] === "authors" &&
      current[current.length - 3] === "authors" &&
      current[current.length - 1] === `${currentPage}`)
  )
    return true; // notes authors paginated links
  return false;
};
---

<div
  class="page-menu"
  style={`--active-boxshadow: 0 0 20px rgba(var(--${color}-rgb), 0.3); --active-boxshadow-hover: 0 6px 40px rgba(var(--${color}-rgb), 0.6); --pagemenu-color: var(--c-${color});`}
>
  <ul class="container">
    {
      links.map((l) => (
        <li>
          <a href={l.path} class:list={[{ active: isActive(l.path) }]}>
            {l.title}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<style lang="scss">
  @use "@css/util";

  .page-menu {
    position: relative;
    display: flex;
    margin-top: 2rem;
  }

  .page-menu ul {
    position: relative;
    display: flex;
    width: 100%;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;

    @include util.mq(sm) {
      flex-direction: row;
      flex-wrap: wrap;
      width: auto;
    }
  }

  li {
    width: 100%;

    @include util.mq(sm) {
      width: auto;
    }
  }

  a {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: var(--page-menu-text-size);
    font-weight: bold;
    text-decoration: none;
    padding: 0.75rem 1rem;
    border: 1px solid var(--page-menu-border-color);
    border-radius: 2rem;
    background: var(--page-menu-background-color);
    color: var(--page-menu-text-color);
    transition: 0.3s ease;

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 2rem;
      box-shadow: 0 4px 20px rgba(255, 255, 255, 0.08);
      opacity: 0;
      transition: 0.3s ease;
    }
    &:not(.active):hover,
    &:focus-within {
      color: var(--c-text);
      border-color: var(--c-text-tertiary);
      transform: translateY(-2px);

      &::after {
        opacity: 1;
      }
    }

    @include util.mq(sm) {
      display: inline-flex;
    }
  }

  .active {
    position: relative;
    color: var(--pagemenu-color);
    border-color: var(--pagemenu-color);
    box-shadow: var(--active-boxshadow);
    cursor: default;

    &::after {
      box-shadow: var(--active-boxshadow-hover);
    }

    &:hover::after {
      opacity: 0.5;
    }
  }
</style>
