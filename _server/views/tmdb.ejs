<%- include('partials/top') %>

<main>
  <div class="header">
    <h1>TMDB</h1>
  </div>

  <div class="media">
    <section class="section movies">
      <h2>Movies</h2>
      <div class="grid-auto">
        <% movies.forEach(m => {%>
          <div class="card" data-type="movie" data-id="<%= m.id %>" data-suppressed="<%= m.last_watch_suppressed %>">
            <div class="top">
              <%= m.title %> (<%= m.release_date.split('-')[0] %>)
            </div>
            <div class="dates">
              <div>Created: <%= new Date(m.createdAt).toLocaleString("en-US", { year: "numeric", month: "numeric", day: "numeric", }) %></div>
              <div>Last Watch: <input type="date" id="<%= m.id %>" value="<%= new Date(m.last_watch).toLocaleString("fr-CA", { year: "numeric", month: "2-digit", day: "2-digit", }).replace(/\//g, '-') %>" onchange="this.parentNode.parentNode.classList.add('changed')" /></div>
              <div class="actions">
                <button class="refresh-last-watch">Quick Refresh</button>
                <button class="update-last-watch">Update Last Watch</button>
                <button class="suppress-last-watch">👁️‍🗨️</button>
              </div>
            </div>
            <div class="status"></div>
          </div>
        <% }) %>
      </div>
      <!-- see dashboard for styles -->
    </section>

    <section class="section shows">
      <h2>Shows</h2>
      <div class="grid-auto">
        <% shows.forEach(m => {%>
          <div class="card" data-type="show" data-id="<%= m.id %>" data-suppressed="<%= m.last_watch_suppressed %>">
            <div class="top">
              <%= m.title %> (<%= m.first_air_date.split('-')[0] %>)
            </div>
            <div class="dates">
              <div>Created: <%= new Date(m.createdAt).toLocaleString("en-US", { year: "numeric", month: "numeric", day: "numeric", }) %></div>
              <div>Last Watch: <input type="date" id="<%= m.id %>" value="<%= new Date(m.last_watch).toLocaleString("fr-CA", { year: "numeric", month: "2-digit", day: "2-digit", }).replace(/\//g, '-') %>" onchange="this.parentNode.parentNode.classList.add('changed')" /></div>
              <div class="actions">
                <button class="refresh-last-watch">Quick Refresh</button>
                <button class="update-last-watch">Update Last Watch</button>
                <button class="suppress-last-watch">👁️‍🗨️</button>
              </div>
            </div>
            <div class="status"></div>
          </div>
        <% }) %>
      </div>
      <!-- see dashboard for styles -->
    </section>
  </div>
</main>

<style>
  .dates {
    display: flex;
    flex-direction: column;
    gap: .25rem;
    font-size: .9rem;
  }

  .dates .actions {
    margin-top: .69rem;
  }

  .dates button {
    padding: .5rem;
    font-weight: bold;
    background: var(--c-dark-accent);
    color: var(--c-text-secondary);
    border: 1px solid var(--c-dark-accent-border);
    border-radius: .2rem;
    cursor: pointer;
  }

  .dates button:hover {
    border-color: var(--c-text-muted);
  }

  
  .dates button.update-last-watch {
    opacity: .42;
    pointer-events: none;
  }
  
  .dates.changed button.update-last-watch {
    opacity: 1;
    pointer-events: auto;
  }

  .card[data-suppressed="1"] button.suppress-last-watch,
  .card[data-suppressed="true"] button.suppress-last-watch {
    background-color: var(--c-state-error);
  }

  .card[data-loading] {
    border-color: var(--c-state-info);
    color: var(--c-state-info);
  }
</style>

<script>
  // get the paginated movies first from the web server!
  // @TODO

  // let's do some event bubbling!
  const parentClicker = document.querySelector(".media");

  parentClicker.addEventListener("click", (e) => {
    const { target } = e;
    if(e.target.tagName === 'BUTTON') {
      let fetchUrl = '/api/tmdb';

      const isSuppress = e.target.className === "suppress-last-watch";
      const isRefresh = e.target.className === "refresh-last-watch";
      const isUpdate = e.target.className === "update-last-watch";

      const parentEl = e.target.parentNode.parentNode.parentNode;
      const id = parentEl.getAttribute('data-id');
      const type = parentEl.getAttribute('data-type');

      if(isSuppress) {
        fetchUrl += '/suppress-last-watch';
        console.log(`suppress ${type} ${id}`);
        fetchTMDBApi(type, id, fetchUrl);
      } else {
        fetchUrl += '/update-last-watch';
        let date = new Date();
  
        if(isUpdate) {
          const dateInputEl = parentEl.querySelector('input[type="date"]');
          date = new Date(dateInputEl.value);
        }

        console.log(`${isUpdate ? 'update' : 'refresh'} ${type} ${id} last_watch to ${JSON.stringify(date)}`);
        fetchTMDBApi(type, id, fetchUrl, date);
      }
    }
  });

  // Fetch Helper
  function fetchTMDBApi(type, id, url, date) {
    // get media element
    const mediaEl = document.querySelector(`[data-id="${id}"]`);
    mediaEl.setAttribute('data-loading', true);

    // set up fetch body
    const fetchBody = { type, id };
    if(!url.includes('suppress') && date) fetchBody.date = date;

    fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(fetchBody),
    })
      .then((response) => {
        if (!response.ok)
          throw new Error(`HTTP error in fetchTMDBApi! status: ${response.status}`);
        return response.json();
      })
      .then((data) => {
        if (data.success) {
          // do success
          if(url.includes('suppress')) {
            console.log('suppress call updated media:', data.media);

            // do suppress data-attr switch
            mediaEl.setAttribute('data-suppressed', data.media.last_watch_suppressed);
          } else {
            console.log('updated media last_watch date:', data.media.last_watch);
          }

          setTimeout(() => {
              mediaEl.removeAttribute('data-loading');
            }, 150);
        } else {
          console.log("fetchTMDBApi Response returned an error:", data.error);
        }
      })
      .catch((error) => {
        console.error("fetchTMDBApi Response returned an error:", error);
      });
  }
</script>

<%- include('partials/bottom') %>
